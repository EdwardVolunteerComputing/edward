<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- This is needed if you want to use the @Transactional annotation -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<context:component-scan base-package="pl.joegreen.edward.persistence.dao" />

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<!-- These properties are replaced by Maven "resources" -->
		<property name="url" value="jdbc:h2:tcp://localhost/~/test" />
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="username" value="alex" />
		<!-- <property name="password" value="${db.password}" /> -->
	</bean>

	<!-- Configure Spring's transaction manager to use a DataSource -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Configure jOOQ's ConnectionProvider to use Spring's TransactionAwareDataSourceProxy, 
		which can dynamically discover the transaction context -->
	<bean id="transactionAwareDataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
		<constructor-arg ref="transactionAwareDataSource" />
	</bean>

	<!-- Configure the DSL object, optionally overriding jOOQ Exceptions with 
		Spring Exceptions -->
	<bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
		<constructor-arg ref="config" />
	</bean>

	<bean id="exceptionTranslator" class="pl.joegreen.edward.persistence.ExceptionTranslator" />

	<!-- Invoking an internal, package-private constructor for the example Implement 
		your own Configuration for more reliable behaviour -->
	<bean class="org.jooq.impl.DefaultConfiguration" name="config">
		<constructor-arg index="0" ref="connectionProvider" />
		<constructor-arg index="1">
			<null />
		</constructor-arg>
		<constructor-arg index="2">
			<null />
		</constructor-arg>
		<constructor-arg index="3">
			<list>
				<bean class="org.jooq.impl.DefaultExecuteListenerProvider">
					<constructor-arg index="0" ref="exceptionTranslator" />
				</bean>
			</list>
		</constructor-arg>
		<constructor-arg index="4">
			<null />
		</constructor-arg>
		<constructor-arg index="5">
			<value type="org.jooq.SQLDialect">H2</value>
		</constructor-arg>
		<constructor-arg index="6">
			<null />
		</constructor-arg>
		<constructor-arg index="7">
			<null />
		</constructor-arg>
	</bean>

</beans>